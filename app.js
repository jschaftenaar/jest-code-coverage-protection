'use strict'

const { program } = require('commander');
const fs = require('fs')

const app = {
  run() {
    program
      .version('1.0.1')
      .description('Compare coverage-summary.json generated by jest')
      .option('-f, --file <filename>', 'The file generated by the (feature) branch you want to check', 'coverage/coverage-summary.json')
      .option('-c, --compare <filename>', 'The file generate by the (master) branch you want to compare against', 'master/coverage/coverage-summary.json')
      .option('-n, --new <threshold','The minimal threshold new code should have', '0.80')
      .option('-v, --variance <variance>','Allow for variance, e.g. allow 0.05 to allow a 5% decrease using hold', '0')
      .option('-m, --mode <mode>','Force <new> code threshold or do not allow decrease <hold>', 'hold')
    program.parse(process.argv);
    const options = program.opts();
    const files = {};

    ['file', 'compare'].forEach((key, index) => {
      try {
        files[key] = JSON.parse(fs.readFileSync(options[key]));
      } catch(err) {
        console.error(`Could not load ${options[key]}`);
        process.exit(1);
      }
    })

    const {file, compare} = files;
    const {mode} = options;
    let exitCode = 0;

    if (options.variance!='0') {
      console.log(`Allowed variance is ${options.variance}`);
    }

    ['lines','statements','functions','branches'].forEach((key) => {
      if (mode=='hold') {
        const diff = (compare.total[key].pct - parseFloat(file.total[key].pct).toFixed(2));
        if (parseFloat(diff) <= parseFloat(options.variance)) {
          console.log(`Coverage for ${key} inside limits, went from ${compare.total[key].pct} to ${file.total[key].pct}`);
        } else {
          console.error(`Yikes, coverage for ${key} outside of limits, went from ${compare.total[key].pct} to ${file.total[key].pct}`);
          exitCode = 1;
        }
      } else if (mode=='new') {
        const diff = file.total[key].total - compare.total[key].total; // e.g. 20
        if (diff<1) {
          console.log(`Less or no ${key} changes, cannot determine coverage difference, skipping`);
        } else {
          const coverageDiff = file.total[key].covered - compare.total[key].covered; // e.g. 18
          const newCoverage = diff*parseFloat(options.new).toFixed(2); // 60
          const newCoveragePct = parseFloat(coverageDiff / diff * 100).toFixed(2);
          if (coverageDiff >= newCoverage) {
            console.log(`Coverage for ${key} inside limits, new code coverage is ${newCoveragePct}`);
          } else {
            console.error(`Yikes, coverage for ${key} outside of limits, new code coverage is ${newCoveragePct}, was expecting at least ${parseFloat(options.new*100).toFixed(2)}`);
            exitCode = 1;
          }
        }
      }
    });
    process.exit(exitCode);
  }
}

module.exports = app;
